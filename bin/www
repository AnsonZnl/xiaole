#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('xiaole:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

//1. 引入socket
const socketPackage= require('socket.io');
//2. 针对http server生成socket.io 实例对象
const io= socketPackage(server);//因为上面已经启动了一个server服务
//3. 监听连接
io.on('connection', (socket)=>{
  console.log('连接成功');
  //3.1 返回消息
  socket.emit('msg', '欢迎来找小乐聊天');
  //3.2 接受客户端的消息
  socket.on('msg', (data)=>{
     console.log(data);
     let msg= backMsg(data);
     socket.emit('msg', msg);
  });
});

// 4. 根据用户输入, 返回信息
let backMsg = (data)=>{
  let msg = null;
  switch (data){
      case '小乐':
          msg =  '我在呢...';
          break;
      case '明天天气':
          msg =  '北京市明天天气可能不太好, 最低气温为21°,有雪!';
          break;
      case '你好':
          msg =  '下午好!';
          break;
      case '唱首歌':
          msg =  '我说的比唱的好听!';
          break;
      case '你很聪明':
          msg =  '哪里!哪里!';
          break;
      case '视频下载':
          msg =  '关注微信公众号旋之华, 有很多视频下载!';
          break;
      case '性别':
          msg =  '我就像刺球仙人掌一样, 没有性别!';
          break;
      case '我爱你':
          msg =  '我看过那么多云, 你是最灵动的那一朵!';
          break;
      default:
          msg = '小乐正在努力升级中...';
  }
  return msg;
};
